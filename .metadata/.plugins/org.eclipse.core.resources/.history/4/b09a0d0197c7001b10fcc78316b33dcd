package com.cg.pack.service;

import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cg.pack.entities.Pack;
import com.cg.pack.exception.PackNotFoundException;
import com.cg.pack.repository.PackRepository;

@Service
public class PackserviceImpl implements IPackservice {

	Logger logger = LoggerFactory.getLogger(PackserviceImpl.class);

	@Autowired
	public PackRepository repository;

	@Override
	public Pack addPack(Pack pack) {
		logger.info("Add pack");

		return repository.save(pack);

	}

	@Override
	public Pack updatePack(Pack pack) {

		logger.info("Update pack");

		return repository.save(pack);
	}

	@Override
	public Pack findPackById(Long PackId) throws PackNotFoundException {

		logger.info("FindPackById");

		Optional<Pack> pack = repository.findById(PackId);

		if (pack.isPresent()) {
			return pack.get();
		} else {
			throw new PackNotFoundException();
		}
	}

	@Override
	public Pack findByName(String packName) throws PackNotFoundException {
		
		logger.info("Find Pack By Name");
		
		Optional<Pack> pack = repository.findByName(packName);
		if(!pack.isPresent())
		{
			throw new PackNotFoundException();
		}
		return pack.get();
	}

	@Override
	public List<Pack> findPacksGreaterThanAmount(double amount) throws PackNotFoundException {

		logger.info("Find Packs Greater Than The Amount");

		List<Pack> pack = repository.findByGreaterThanAmount(amount);
		return pack;

	}

	@Override
	public List<Pack> findPacksInAscendingOrderByCost(double amount) {

		logger.info("Find Packs In Ascending Order By Cost");

		List<Pack> pack = repository.findPacksInAscendingOrderByCost(amount);
		return pack;
	}

	@Override
	public List<Pack> findPacksInAscendingOrderByDaysValidity() {

		logger.info("Find Packs In Ascending Order By Validity");

		List<Pack> pack = repository.findPacksInAscendingOrderByDaysValidity();
		return pack;
	}

	@Override
	public List<Pack> popularPacks() {

		logger.info("Popular Packs");
		
		return repository.findRechargesCountInDescendingOrder();
	}

	@Override
	public void deleteByPackId(Long packId) throws PackNotFoundException {

		logger.info("Delete Pack");

		Optional<Pack> pack = repository.findById(packId);

		if (pack.isPresent()) {
			repository.deleteById(packId);
		} else {
			throw new PackNotFoundException();
		}
	}



}
